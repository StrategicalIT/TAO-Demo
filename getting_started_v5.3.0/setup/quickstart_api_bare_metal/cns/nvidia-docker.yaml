- hosts: all
  become: true
  become_method: sudo
  vars_files:
    - cns_values.yaml
  vars:
    daemon_json:
      default-runtime: nvidia
      runtimes:
        nvidia:
          path: /usr/bin/nvidia-container-runtime
          runtimeArgs: []
  tasks:

    - name: Check Docker is installed
      shell: docker
      register: docker_exists
      no_log: true
      failed_when: false

    - name: Check NVIDIA docker is installed
      shell: nvidia-docker
      register: nvidia_docker_exists
      no_log: true
      failed_when: false

    - name: Install Docker Dependencies on Ubuntu
      when: docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - lsb-release
          - gnupg
          - apt-utils
          - unzip
        state: latest
        update_cache: true
 
    - name: Install Docker Dependencies on RHEL
      when: docker_exists.rc >= 1 and ansible_distribution == 'RedHat' or nvidia_docker_exists.rc >= 1 and ansible_distribution == 'RedHat'
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - unzip
        state: latest
        update_cache: true

    - name: Add Docker APT signing key
      when: docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Add Docker repository into sources list
      when: docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Add Docker repo on RHEL
      when: docker_exists.rc >= 1 and ansible_distribution == 'RedHat'
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docer-ce.repo

    - name: Create docker systemd file
      when: docker_exists.rc >= 1
      become: true
      copy:
        dest: /etc/systemd/system/docker.service
        content: |
          [Unit]
          Description=Docker Application Container Engine
          Documentation=https://docs.docker.com
          After=network-online.target docker.socket firewalld.service containerd.service
          Wants=network-online.target
          Requires=docker.socket containerd.service

          [Service]
          Type=notify
          ExecStart=/usr/bin/dockerd -H unix:// --containerd=/run/containerd/containerd.sock
          ExecReload=/bin/kill -s HUP $MAINPID
          TimeoutSec=0
          RestartSec=2
          Restart=always
          StartLimitBurst=3
          StartLimitInterval=60s
          LimitNOFILE=infinity
          LimitNPROC=infinity
          LimitCORE=infinity
          TasksMax=infinity
          Delegate=yes
          KillMode=process
          OOMScoreAdjust=-500
          [Install]
          WantedBy=multi-user.target

    - name: Install Docker on Ubuntu
      when: docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      package:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: latest

    - name: Install Docker on RHEL
      when: docker_exists.rc >= 1 and ansible_distribution == 'RedHat'
      yum:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: latest
        allowerasing: true
        update_cache: true

    - name: remove nvidia-docker on RHEL
      when: nvidia_docker_exists.rc == 0 and ansible_distribution == 'RedHat'
      yum:
        name:
          - nvidia-docker
          - nvidia-docker2
        state: absent
        autoremove: yes

    - name: remove nvidia-docker v1
      when: nvidia_docker_exists.rc == 0 and ansible_distribution == 'Ubuntu'
      apt:
        name: nvidia-docker
        state: absent
        purge: yes

    - name: Add NVIDIA Docker APT signing key
      when: nvidia_docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      apt_key:
        url: https://nvidia.github.io/nvidia-docker/gpgkey
        state: present

    - name: Add NVIDIA Docker apt signing key for Ubuntu
      when: nvidia_docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      apt_key:
        url: https://nvidia.github.io/libnvidia-container/gpgkey
        state: present

    - name: Get NVIDIA Docker Apt list
      when: nvidia_docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      get_url:
        url: https://nvidia.github.io/nvidia-docker/ubuntu22.04/nvidia-docker.list
        dest: /etc/apt/sources.list.d/nvidia-container-toolkit.list
        mode: 0644

    - name: Get NVIDIA Container Toolkit Apt list
      when: nvidia_docker_exists.rc >= 1 and ansible_distribution == 'Ubuntu'
      get_url:
        url: https://nvidia.github.io/libnvidia-container/ubuntu22.04/libnvidia-container.list
        dest: /etc/apt/sources.list.d/libnvidia-container.list
        mode: 0644

    - name: add NVIDIA Docker repo on RHEL
      when: nvidia_docker_exists.rc >= 1 and ansible_distribution == 'RedHat'
      get_url:
        url:  https://nvidia.github.io/nvidia-docker/centos8/nvidia-docker.repo
        dest: /etc/yum.repos.d/nvidia-docker.repo
        mode: 0644
        owner: root
        group: root

    - name: add NVIDIA Container Toolkit repo on RHEL
      when: nvidia_docker_exists.rc >= 1 and ansible_distribution == 'RedHat'
      get_url:
        url:  https://nvidia.github.io/libnvidia-container/centos8/libnvidia-container.repo
        dest: /etc/yum.repos.d/nvidia-container-toolkit.repo
        mode: 0644
        owner: root
        group: root

    - name: Remove old NVIDIA container tooklit
      when: nvidia_docker_exists.rc >= 1
      failed_when: false
      apt:
        name: ['nvidia-container-toolkit*', 'nvidia-container-runtime*', 'libnvidia-container*']
        state: absent
        autoremove: yes

    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 7.0 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 6.2 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ "nvidia-docker2=2.10.0-1", "nvidia-container-runtime=3.10.0-1" ]
        state: present
        update_cache: true

    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 8.0 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 8.1 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 7.1 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 7.2 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 6.4 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ "nvidia-docker2=2.11.0-1", "nvidia-container-runtime=3.11.0-1" ]
        state: present
        update_cache: true


    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 8.2 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 7.3 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 9.0 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ "nvidia-docker2=2.12.0-1", "nvidia-container-runtime=3.12.0-1", 'nvidia-container-toolkit=1.12.0-1', 'nvidia-container-toolkit-base=1.12.0-1' ]
        state: present
        update_cache: true

    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 8.3 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 7.4 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 9.1 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 10.0 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ "nvidia-docker2=2.13.0-1", "nvidia-container-runtime=3.13.0-1", 'nvidia-container-toolkit=1.13.0-1', 'nvidia-container-toolkit-base=1.13.0-1']
        state: present
        update_cache: true

    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 8.4 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 7.5 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 9.2 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 10.1 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ 'nvidia-docker2=2.13.0-1', 'nvidia-container-toolkit=1.13.2-1', 'nvidia-container-toolkit-base=1.13.2-1', 'libnvidia-container-tools=1.13.2-1', 'libnvidia-container1=1.13.2-1']
        state: present
        update_cache: true

    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 8.5 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 9.3 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 10.2 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ 'nvidia-docker2=2.13.0-1',  'nvidia-container-toolkit=1.13.5-1', 'nvidia-container-toolkit-base=1.13.5-1', 'libnvidia-container-tools=1.13.5-1', 'libnvidia-container1=1.13.5-1']
        state: present
        update_cache: true

    - name: Install NVIDIA Docker and NVIDIA Container Runtime
      when: nvidia_docker_exists.rc >= 1 and cns_version == 9.4 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 10.3 and ansible_distribution == 'Ubuntu' or nvidia_docker_exists.rc >= 1 and cns_version == 11.0 and ansible_distribution == 'Ubuntu'
      apt:
        name: [ 'nvidia-docker2=2.14.0-1',  'nvidia-container-toolkit=1.14.3-1', 'nvidia-container-toolkit-base=1.14.3-1', 'libnvidia-container-tools=1.14.3-1', 'libnvidia-container1=1.14.3-1']
        state: present
        update_cache: true

    - name: install NVIDIA container runtime and NVIDIA Docker on RHEL
      when: nvidia_docker_exists.rc >= 1 and cns_version >= 10.0 and ansible_distribution == 'RedHat'
      yum:
        name: ['nvidia-container-toolkit', 'nvidia-docker2']
        state: present
        update_cache: yes

    - name: Update docker default runtime
      when: nvidia_docker_exists.rc >= 1 
      copy:
        content: "{{ daemon_json | to_nice_json }}"
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: 0644

    - name: Restart Docker Service
      service: name=docker state=restarted enabled=yes

    - name: Update Containerd Runtime for NVIDIA Cloud Native Stack
      become: true
      block:
        - name: Create /etc/containerd
          file:
            path: /etc/containerd
            state: directory

        - name: Write defaults to config.toml
          copy:
            src: "{{lookup('pipe', 'pwd')}}/files/config.toml"
            dest: /etc/containerd/config.toml
            mode: 0664

        - name: Enable systemd cgroups
          shell: sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

        - name: restart containerd
          service:
            name: containerd
            state: restarted
            daemon_reload: yes
      when: "container_runtime == 'containerd'"

    - name: NGC CLI Setup
      become: true
      block:
        - name: Download CLI
          get_url:
            url: https://ngc.nvidia.com/downloads/ngccli_linux.zip
            dest: /tmp/ngccli_linux.zip
            mode: 0664

        - name: Install NGC CLI
          unarchive:
            src: /tmp/ngccli_linux.zip
            dest: /usr/local/bin/
            remote_src: yes

    - name: Reload the CRI-O configuration
      when: container_runtime == 'cri-o'
      become: true
      block:
       - name: reload
         systemd:
           daemon_reload: true

       - name: restart
         service:
           name: "{{ item }}"
           state: restarted
         with_items:
           - crio
           - cri-o